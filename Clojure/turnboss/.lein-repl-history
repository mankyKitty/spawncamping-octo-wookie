(use ns.turnboss.core)
(+ 4 5)
(use hiccup.core)
(:use hiccup)
(ns turnboss.handler)
(ns turnboss.components.extras)
(modal-form-body)
(ns turnboss.core)
(use hiccup.core)
(use 'hiccup.core)
(use 'hiccip.form)
(use 'hiccup.form)
(doc form-to)
(doc to-uri)
(use 'hiccup.util)
(doc ToUri)
(doc to-uri)
(to-uri "fish")
(to-uri [:a {:href "salmon"} "Tuna"])
(def fish [:a {:href "salmon"} "Tuna"])
(url fish)
(ns turnboss.core
(:require [hiccup.core :as hic]
))
(html [:div {:class "foo
"} (list []))
(html [:div {:class "foo"} "fish" (list []))
(html [:div {:class "foo"} "fish" (list [])])
(use 'hiccup.core)
(doc html)
(html [:div {:class "foo"} "FOO!" (list [])])
(html [[:div {:class "foo"} "FOO!"] (list [])])
(html [:div {:class "foo"} (list [])])
(html [:div {:class "foo"}])
(html [:div {:class "foo"} (unordered-list [])])
(use 'hiccup.element)
(html [:div {:class "foo"} (unordered-list [])])
(html [:div {:class "foo"} (unordered-list [{} {}])])
(doc when)
(doc if)
(require '[cljs.repl :as repl])
(def foo {:name "Steve" :role "Combat"})
(get foo :name)
(doc doseq)
(doseq [t ["foo" "biscuit"]] (println t))
(doc map)
(ns turnboss.models.npcs (:use [hiccup.def :only [defhtml]] [hiccup.form :only [radio-button]]))
(radio-button "foo" false "Fish")
(doseq [t ["foo" "biscuit"]] (radio-button "foo" false t))
(map radio-button ["foot" "biscuit"])
(map radio-button "fish" false ["foot" "biscuit"])
(map (radio-button "FISH" false) ["foo" "biscuit"])
(to-lower-case)
(lower-case "Fish")
(clojure.core/string.lower-case "Fish")
(string/lower-case "Fish")
(clojure.string/lower-case "Fish")
